# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '10.x'
  displayName: 'Install Node.js'

- script: |
    npm install -g @angular/cli
    npm install
    ng build --prod
  displayName: 'npm install and build'

- task: CopyFiles@2
  inputs:
    SourceFolder: 'angular/recruitment-application/dist/recruitment-application'
    Contents: 'index.html'
    TargetFolder: 'springboot/recruitment-application/src/main/resources/templates'

- task: DeleteFiles@1
  inputs:
    SourceFolder: 'angular/recruitment-application/dist/recruitment-application'
    Contents: 'index.html'

- task: CopyFiles@2
  inputs:
    SourceFolder: 'angular/recruitment-application/dist/recruitment-application'
    Contents: '**'
    TargetFolder: 'springboot/recruitment-application/src/main/resources/static'



variables:

  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: '64ad4c58-2612-42be-ac95-175f017797ac'
  
  # Web app name
  webAppName: 'recruitment-application'

  # Environment name
  environmentName: 'recruitment-application'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: MavenPackageAndPublishArtifacts
    displayName: Maven Package and Publish Artifacts
    pool:
      vmImage: $(vmImageName)
    
    steps:
    - task: Maven@3
      displayName: 'Maven Package'
      inputs:
        mavenPomFile: 'springboot/recruitment-application/pom.xml'

    - task: CopyFiles@2
      displayName: 'Copy Files to artifact staging directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '**/target/*.?(war|jar)'
        TargetFolder: $(Build.ArtifactStagingDirectory)

    - upload: $(Build.ArtifactStagingDirectory)
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployLinuxWebApp
    displayName: Deploy Linux Web App
    environment: $(environmentName)
    pool: 
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Azure Web App Deploy: recruitment-application'
            inputs:
              azureSubscription: $(azureSubscription)
              appType: webAppLinux
              appName: $(webAppName)
              package: '$(Pipeline.Workspace)/drop/**/target/*.?(war|jar)'
